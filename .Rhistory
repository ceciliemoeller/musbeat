for(k in 1:nrow(tap)){
dif[[k]]<- diff(as.numeric(unlist(strsplit(tap[k,], ","))))
}
# #calculate mean inter-tap intervals for each observation and bind the vector of means to the output dataframe
meanITI<-vector()
for(k in 1:nrow(tap)){
meanITI[k]<- mean(dif[[k]])
}
output<-cbind(output, meanITI)
# #calculate sd of inter-tap intervals for each observation and bind the vector of SDs to the output dataframe
sdITI<-vector()
for(k in 1:nrow(tap)){
sdITI[k]<- sd(dif[[k]])
}
output<-cbind(output, sdITI)
## and then calculate the within-trial coefficient of variation
output<-
output%>%
mutate(cv_wt=sdITI/meanITI)
# #calculate median inter-tap intervals for each observation and bind the vector of medians to the output dataframe
medITI<-vector()
for(k in 1:nrow(tap)){
medITI[k]<- median(dif[[k]])
}
output<-cbind(output, medITI)
# #calculate IQR of inter-tap intervals for each observation and bind the vector of IQR to the output dataframe
iqrITI<-vector()
for(k in 1:nrow(tap)){
iqrITI[k]<- IQR(dif[[k]])
}
output<-cbind(output, iqrITI)
library(jsonlite) # is included in the tidyverse package but must be loaded manually
library(plyr)
library(tidyverse) # note to self: errors thrown by ffjenkins may arise here
library(rstudioapi) # here, or in setwd() below
setwd(dirname(getActiveDocumentContext()$path))       # Set working directory to source file location
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/results/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/results/results"),full.names=F))
files <- files[grep(".rds$",files)]
names(files) <- basename(files)
addUniqueID <- ldply(files)
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
stringsAsFactors=F)
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/results/results/",files[i]))
output[i,"id"] <- results$session$p_id
output[i,"complete"] <- results$session$complete
output[i,"currentTime"] <- results$session$current_time
output[i,"startTime"] <- results$session$time_started
output[i,"device"] <- results$results$device
output[i,"browser"] <- results$results$browser
if ("age"%in%names(results$results)) {
output[i,"age"] <- results$results$age
}
if ("ollen"%in%names(results$results)) {
output[i,"ollen"] <- results$results$ollen
}
if ("duplets"%in%names(results$results)) {
output[i,"duplets"] <- results$results$duplets
}
if ("code"%in%names(results$results)) {
output[i,"code"] <- results$results$code
}
if ("poly_ratio"%in%names(results$results)) {
# make js data into dataframe
jsdata<- fromJSON(results$results$poly_ratio)
# extract relevant rows, i.e. only those containing tapping data
tapping_all <- subset(jsdata, trial_type== "audio-bpm-button-response")
# save spontaneous taps (which are in the first column) in the output file
output[i,"spontaneous_taps"]<-tapping_all$rt[1]
}
}
View(output)
# fix inconsistencies in personal codes
output$code[output$code=="cille "]<- "cille"
output$code[output$code=="Cille"]<- "LP"
output<-
output %>%
mutate(duplets = ifelse(code == "Daina", "Yes, twice before", duplets))
output<-
output %>%
mutate(age = ifelse(code == "Daina", NA, age))
output<-
output %>%
mutate(ollen = ifelse(code == "Daina", NA, ollen))
output$code[output$code=="Daina"]<- "Greta"
output<-
output%>%
filter(code!="deleteme")%>%
filter(code !="MissingTaps")%>%
filter(code !="Fastfake")
tap<-as.data.frame(output$spontaneous_taps) # extract taps and turn into data frame
View(tap)
for(k in 1:nrow(tap)){
dif[[k]]<- diff(as.numeric(unlist(strsplit(tap[k,], ","))))
}
dif<- list() #create empty list (the list holds different lengths of data)
for(k in 1:nrow(tap)){
dif[[k]]<- diff(as.numeric(unlist(strsplit(tap[k,], ","))))
}
View(dif)
# #calculate mean inter-tap intervals for each observation and bind the vector of means to the output dataframe
meanITI<-vector()
for(k in 1:nrow(tap)){
meanITI[k]<- mean(dif[[k]])
}
output<-cbind(output, meanITI)
View(output)
# #calculate sd of inter-tap intervals for each observation and bind the vector of SDs to the output dataframe
sdITI<-vector()
for(k in 1:nrow(tap)){
sdITI[k]<- sd(dif[[k]])
}
output<-cbind(output, sdITI)
## and then calculate the within-trial coefficient of variation
output<-
output%>%
mutate(cv_wt=sdITI/meanITI)
# #calculate median inter-tap intervals for each observation and bind the vector of medians to the output dataframe
medITI<-vector()
for(k in 1:nrow(tap)){
medITI[k]<- median(dif[[k]])
}
output<-cbind(output, medITI)
# #calculate IQR of inter-tap intervals for each observation and bind the vector of IQR to the output dataframe
iqrITI<-vector()
for(k in 1:nrow(tap)){
iqrITI[k]<- IQR(dif[[k]])
}
output<-cbind(output, iqrITI)
# Calculate consistency across trials within participants
IC<-
output %>%
group_by(code) %>%
summarise(ITI_consistency = mean(medITI))
output$dataset<-1:nrow(output)
output <- subset(output, select=c(dataset,1:ncol(output)-1))
col_order <- c( "dataset", "code" ,"ollen", "age", "duplets","medITI","cv_wt","iqrITI","meanITI", "sdITI", "browser", "device", "currentTime", "startTime",  "spontaneous_taps",  "id",  "complete"
)
output <- output[, col_order]
# main data files
write.csv(output, file = "./analyses/SMT_pilot.csv",row.names = FALSE)
output%>%
ggplot()+
geom_point(aes(x=meanITI, y=medITI, color=code, shape=device), size=6)
output%>%
ggplot()+
geom_point(aes(x=meanITI, y=medITI, color=code, shape=browser), size=6)
output%>%
ggplot()+
geom_point(aes(x=sdITI, y=iqrITI, color=code, shape=device), size=6)
output%>%
ggplot()+
geom_point(aes(x=cv_wt, y=medITI, color=code, shape=device), size=3)
#
#
# n_int_speak_p <- nrow(output_musbeat[output_musbeat$headphones== "my device's internal speakers",])
#
# n_int_speak_p <- nrow(output_musbeat[output_musbeat$headphones== "my device's internal speakers",])
# n_nonmusician<-sum(!is.na(output$ollen[output$ollen == "Nonmusician" | output$ollen == "Music-loving nonmusician"]))
#
# n_int_speak_p <- nrow(output_musbeat[output_musbeat$headphones== "my device's internal speakers",])
# n_nonmusician<-sum(!is.na(output$ollen[output$ollen == "Nonmusician" | output$ollen == "Music-loving nonmusician"]))
# n_musicians<-sum(!is.na(output$ollen[!output$ollen == "Music-loving nonmusician"& !output$ollen == "Nonmusician"]))
###########################################################################
# This script extracts data from the pitch-polyrhythm study               #
#                                                                         #                                                                       #
#                                                                         #
# Date: March 2022                                                        #
# Author: Cecilie MÃ¸ller                                                  #
# Project group: above + Jan Stupacher, Alexandre Celma-Miralles,         #
# Peter Vuust                                                             #
###########################################################################
# install.packages("jsonlite")
# install.packages("plyr")
# install.packages("dplyr")
# install.packages("ggplot2")
# INITIALIZE
library(jsonlite)
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyverse)
# SET WORKING DIRECTORY
setwd("C:/Users/au213911/Documents/musbeat")
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/results/pilot_I_results/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/results/pilot_I_results/results"),full.names=F))
files <- files[grep(".rds$",files)]
names(files) <- basename(files)
addUniqueID <- ldply(files)
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
stringsAsFactors=F)
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/results/pilot_I_results/results/",files[i]))
output[i,"id"] <- results$session$p_id
output[i,"complete"] <- results$session$complete
output[i,"currentTime"] <- results$session$current_time
output[i,"startTime"] <- results$session$time_started
output[i,"device"] <- results$results$device
output[i,"browser"] <- results$results$browser
output[i,"headphones"] <- results$results$headphones
if ("age"%in%names(results$results)) {
output[i,"age"] <- results$results$age
output[i,"gender"] <- results$results$gender
}
if ("language"%in%names(results$results)) {
output[i,"residence"] <- results$results$residence
output[i,"youth_country"] <- results$results$youth_country
output[i,"language"] <- results$results$language
}
if ("ollen"%in%names(results$results)) {
output[i,"ollen"] <- results$results$ollen
}
if ("years_instr_1"%in%names(results$results)) {
output[i,"MT_06"] <- results$results$MT_06
output[i,"genre"] <- results$results$genre
output[i,"instrument_1"] <- results$results$instrument_1
output[i,"hours_instr_1"] <- results$results$hours_instr_1
output[i,"years_instr_1"] <- results$results$years_instr_1
output[i,"reg_play_1"] <- results$results$reg_play_1
output[i,"instrument_2"] <- results$results$instrument_2
}
if ("years_instr_2"%in%names(results$results)) {
output[i,"hours_instr_2"] <- results$results$hours_instr_2
output[i,"years_instr_2"] <- results$results$years_instr_2
output[i,"reg_play_2"] <- results$results$reg_play_2
output[i,"instrument_3"] <- results$results$instrument_3
}
if ("years_instr_3"%in%names(results$results)) {
output[i,"hours_instr_3"] <- results$results$hours_instr_3
output[i,"years_instr_3"] <- results$results$years_instr_3
output[i,"reg_play_3"] <- results$results$reg_play_3
output[i,"other_instr"] <- results$results$other_instr
}
if ("duplets"%in%names(results$results)) {
output[i,"duplets"] <- results$results$duplets
}
if ("comments"%in%names(results$results)) {
output[i,"comments"] <- results$results$comments
}
if ("poly_pitch"%in%names(results$results)) {
# make js data into dataframe
jsdata<- fromJSON(results$results$poly_pitch)
#look in first row of the dataframe to see which condition (pitch/tempo/ratio) this participant was in and paste into output
output[i,"experiment"]<-jsdata$stimulus[1]
# extract relevant rows, i.e. only those containing tapping data
tapping_all <- subset(jsdata, trial_type== "audio-bpm-button-response")
# save spontaneous taps (which are in the first column) in the output file
output[i,"spontaneous_taps"]<-tapping_all$rt[1]
#remove spontaneous taps (duplicate column name)
tapping <- subset(tapping_all, stimulus!= "sounds/spontaneous_tap_15s.mp3")
#  # Add block number column and append block and (important bits of) stimulus names in the column "stim"
# tapping$block[tapping$trial_index == 5|tapping$trial_index==7|tapping$trial_index==9|tapping$trial_index==11|tapping$trial_index==13|tapping$trial_index==15|tapping$trial_index==17|tapping$trial_index==19]  <- "B1"
# tapping$block[tapping$trial_index==22|tapping$trial_index==24|tapping$trial_index==26|tapping$trial_index==28|tapping$trial_index==30|tapping$trial_index==32|tapping$trial_index==34|tapping$trial_index==36]  <- "B2"
tapping$block[tapping$internal_node_id == "0.0-5.0-0.0"|tapping$internal_node_id=="0.0-5.0-0.1"|tapping$internal_node_id=="0.0-5.0-0.2"|tapping$internal_node_id=="0.0-5.0-0.3"|tapping$internal_node_id=="0.0-5.0-0.4"|tapping$internal_node_id=="0.0-5.0-0.5"|tapping$internal_node_id=="0.0-5.0-0.6"|tapping$internal_node_id=="0.0-5.0-0.7"]  <- "B1"
tapping$block[tapping$internal_node_id== "0.0-7.0-0.0"|tapping$internal_node_id=="0.0-7.0-0.1"|tapping$internal_node_id=="0.0-7.0-0.2"|tapping$internal_node_id=="0.0-7.0-0.3"|tapping$internal_node_id=="0.0-7.0-0.4"|tapping$internal_node_id=="0.0-7.0-0.5"|tapping$internal_node_id=="0.0-7.0-0.6"|tapping$internal_node_id=="0.0-7.0-0.7"]  <- "B2"
# delete redundant strings from stimulus name
tapping$stimulus<- gsub("^.{0,13}", "", tapping$stimulus)
tapping$stimulus  = substr(tapping$stimulus,1,nchar(tapping$stimulus)-4)
# and paste the block and stimulus name together in a new variable called "stim"
tapping$stim <- paste(tapping$block, tapping$stimulus, sep="_")
#  ##############
# and restructure
reshaped <- t(tapping)
# Extract stimulus names
conds<-reshaped['stim',]
# extract taps
taps<-reshaped['rt',]
# and paste the taps into the column in output which is named according to conds (stimulus name)
output[i,conds]<-taps
########################################################################
# # extract stimulus presentation order and ratings
#
#     tr_ind<-reshaped['trial_index',]
#     stim<-reshaped['stimulus',]
#     output[i,tr_ind]<-stim
#
#     rating<-subset(jsdata, trial_type=="html-slider-response")
#     t_rating <- t(rating)
#
#     tr_ind<-t_rating['trial_index',]
#     verdict<-t_rating['response',]
#     output[i,tr_ind]<-verdict
}
}
output <- bind_cols(addUniqueID, output)
output$id <-output$.id
output<- output%>% select(-.id,-V1 )
# rename values in "experiment" to show which of the three experiments the dataset belongs to
output$experiment <- gsub("sounds/pitch/poly_pitch_marimba_loudness.mp3", "pitch", output$experiment)
####################################################
# WHAT HAVE WE GOT OVERALL?
# how many finished the tapping part?
n_tapping<-sum(!is.na(output$experiment))
#how many had tried the experiment at least once before?
n_duplets<-sum(!is.na(output$duplets[!output$duplets == "No"]))
#how many complete responses do we have (tapping + demographics)?
n_complete <-nrow(output[output$complete==TRUE,])
# EXCLUDE DATA from participants who stated that they had tried the experiment before
# or who did not answer the duplet question and hence produced incomplete data.
# Visualize cases to be excluded
ggplot(output[!is.na(output$experiment),], aes(x = duplets)) +
geom_bar()+
labs(title = '"TAPPING ONLY" DATASETS: Been there, done that?')+
theme(axis.text.x = element_text(angle = 270))+
facet_wrap(~experiment)
ggplot(output[output$complete==TRUE,], aes(x = duplets)) +
geom_bar()+
labs(title = 'COMPLETE DATASETS: Been there, done that?')+
theme(axis.text.x = element_text(angle = 270))+
facet_wrap(~experiment)
# # exclude (comment out this section for pilotdata extraction)
#
# output <- subset(output, duplets== "No")
# output <- subset(output, complete== TRUE) # redundant in this case as incomplete responses were not included in the line above either
#  Do we have double data under different ids?
# diagnose
doubledata<- output[duplicated(output$spontaneous_taps),]
# manually remove the participant whose data was saved twice under different ids
# #remove
# output <- subset(output, id!="id=440&p_id=d2fc24d5b59e5796ff9e46034aa7b598119ea62c8f1d31af04c2252c409f7f5c&save_id=6&pilot=false&complete=true.rds")
#
# # assess a subsample of possibly safari-related pointy ITI-plots
#
# output_r$browser[output_r$part[c(2,10,17,20,25,37,43,48,52,59,63,64,67,82,89,105,108,109,114,116)]]
# recode "ollen" into  "musicianship" variable
output$musicianship[output$ollen=="Nonmusician"]  <- "Nonmusician"
output$musicianship[output$ollen=="Music-loving nonmusician"]  <- "Nonmusician"
output$musicianship[output$ollen=="Amateur musician"]  <- "Amateur musician"
output$musicianship[output$ollen=="Serious amateur musician"]  <- "Amateur musician"
output$musicianship[output$ollen=="Semiprofessional musician"]  <- "Semi/professional musician"
output$musicianship[output$ollen=="Professional musician"]  <- "Semi/professional musician"
# REORDER COLUMNS for SÃ nder's pilot data check
sander <- output[, c(c(1:12), 49, c(13:15), c(34:48), c(17:33))]
# MAKE FILES
# pitch
# output_musbeat<- subset(output, experiment== "pitch")
emptycols <- colSums(is.na(sander)) == nrow(sander)
sander <- sander[!emptycols]
# # OUTCOMMENT THIS LINE FOR PILOT DATA
# # exclude participants who used their deviceâs internal speakers in the pitch experiment
# output_musbeat <- subset(output_musbeat, headphones!= "my device's internal speakers")
#add part no separately for each participant
sander$part<-1:nrow(sander)
sander <- subset(sander, select=c(part,1:ncol(sander)-1))
#
# Make file for Jan
jan <- sander
# #delete info redundant for tapping analyses
sander<- sander%>% select(-c(2:32))
# ##################################
# # WRITE CSV-FILES
# #
# # # main data files
# write.csv(jan, file = "./analyses/jan_pilot.csv",row.names = FALSE)
# write.csv(sander, file = "./analyses/sander_pilot.csv",row.names = FALSE)
####################################
# ASSESS DATA AND PLOT THE LOT
########## Ns and PROPs #########
n_int_speak_p <- nrow(output_musbeat[output_musbeat$headphones== "my device's internal speakers",])
n_nonmusician<-sum(!is.na(output$ollen[output$ollen == "Nonmusician" | output$ollen == "Music-loving nonmusician"]))
n_musicians<-sum(!is.na(output$ollen[!output$ollen == "Music-loving nonmusician"& !output$ollen == "Nonmusician"]))
n_musicians_p <- sum(!is.na(output_musbeat$ollen[!output_musbeat$ollen == "Music-loving nonmusician"& !output_musbeat$ollen == "Nonmusician"]))
pct_musicians_p <- n_musicians_p/nrow(output_musbeat)*100
##########################
# Extract comments
show_comments<-output %>% select(id, currentTime, comments, experiment, headphones, browser, device)
show_comments<- show_comments[!is.na(show_comments$comments),]
show_comments<- show_comments[!show_comments$comments == "",]
# write.csv(show_comments, file = "./comments.csv")
# ################### A FEW QUICK PLOTS ######################
#
# my_theme = theme(
#   axis.title.x = element_text(size = 16),
#   axis.text.x = element_text(size = 14),
#   axis.title.y = element_text(size = 16))
#
# my_vert_theme = my_theme +
#   theme(axis.text.x = element_text(size = 10, angle = 270))
#
# my_facet_theme = my_theme +
#   theme(strip.text.x = element_text(size = 16))
#
# my_facet_vert_theme = my_facet_theme+
#   theme(axis.text.x = element_text(size = 14, angle = 270))
#
# # plot recruitment success by date and n
# hist(output_musbeat$currentTime, breaks = "days", main = "Recruitment success by date:all complete datasets", xlab = "Date of data collection", freq = TRUE)
#
# ggplot(output_musbeat, aes(x = currentTime, fill = residence)) +
#   geom_histogram()+
#   labs(title = 'Recruitment success by date and residence (good data only: excl. incompl.,duplicates and pitch=int.speak.)')+
#   theme(axis.text.x = element_text(angle = 270))
#
# #plot n
#
# ggplot(output_musbeat, aes(x = experiment)) +
#   geom_bar()+
#   labs(title = 'COMPLETE GOOD DATASETS PER EXP.')+
#   my_theme
#
# ggplot(output_musbeat, aes(x = ollen)) +
#   geom_bar()+
#   labs(title = "Participants' self-reported musicianship")+
#   my_facet_vert_theme+
#   facet_wrap(~experiment)
#
#
# #####################
# #PLOT TECHS
#
# #plot headphones
#
# ggplot(output_musbeat, aes(x = headphones,fill=device)) +
#   geom_bar()+
#   labs(title = 'HEADPHONES by device')+
#   my_vert_theme+
#   facet_wrap(~experiment)
#
# ggplot(output_musbeat, aes(x = browser,fill=device)) +
#   geom_bar()+
#   labs(title = 'BROWSER by device')+
#   my_facet_vert_theme+
#   facet_wrap(~experiment)
#
# ggplot(output_musbeat, aes(x = headphones, fill= device)) +
#   geom_bar()+
#   labs(title = 'HEADPHONES by device')+
#   my_facet_vert_theme
#
#
# #####################
# #PLOT MUSICIANSHIP
#
# ggplot(output_musbeat[!is.na(output_musbeat$ollen),], aes(x = ollen, fill= gender)) +
#   geom_bar()+
#   labs(title = 'MUSICIANSHIP')+
#   my_facet_vert_theme+
#   facet_wrap(~experiment)
#
# ggplot(output_musbeat[!is.na(output_musbeat$instrument),], aes(x = instrument, fill=ollen)) +
#   geom_bar()+
#   labs(title = 'THE INSTRUMENT I PLAY BEST IS...')+
#   my_vert_theme
#
#
#
# ggplot(output_musbeat[!is.na(output_musbeat$musicianship),], aes(x = musicianship, fill= gender)) +
#   geom_bar()+
#   labs(title = 'MUSICIANSHIP')+
#   my_facet_vert_theme+
#   facet_wrap(~experiment)
#
# # Fix as.numeric
# output_musbeat$years_instr[output_musbeat$years_instr=="I don't play any instrument"]  <- 99
# output_musbeat$years_instr<-as.numeric(output_musbeat$years_instr)
#
# ggplot(output_musbeat[!is.na(output_musbeat$years_instr),], aes(x = years_instr, fill=ollen)) +
#   geom_bar()+
#   labs(title = "YEARS_INSTR BY MUSICIANSHIP (99 = I don't play any instrument)")+
#   scale_x_continuous(breaks=seq(0, 100, 10))+
#   scale_y_continuous(breaks=seq(0, 25, 10))+
#   theme(axis.text.x = element_text(angle = 270))
#
# ggplot(output_musbeat[!is.na(output_musbeat$years_instr),], aes(x = MT_06, fill=ollen)) +
#   geom_bar()+
#   labs(title = 'NO. OF MUSICAL INSTRUMENTS PLAYED')+
#   my_theme
#
#
# #####################
# #PLOT DEMOGRAPHICS
#
# # age and gender
# ggplot(output_musbeat[!is.na(output_musbeat$age),], aes(x = age, fill=gender)) +
#   geom_bar()+
#   labs(title = 'AGE by gender')+
#   my_facet_vert_theme
#  # facet_wrap(~experiment)
#
# ggplot(output_musbeat[!is.na(output_musbeat$gender),], aes(x = gender)) +
#   geom_bar()+
#   labs(title = 'GENDER by headphones - good data only')+
#   my_facet_vert_theme+
#   facet_wrap(~experiment)
#
# # youth country residence and language
#
#
# ggplot(output_musbeat[!is.na(output_musbeat$language),], aes(x = language, fill=residence)) +
#   geom_bar()+
#   labs(title = 'LANGUAGE BY CURRENT RESIDENCE')+
#   theme(axis.text.x = element_text(angle = 270))
#
# ggplot(output_musbeat[!is.na(output_musbeat$language),], aes(x = language, fill=youth_country)) +
#   geom_bar()+
#   labs(title = 'LANGUAGE BY YOUTH COUNTRY')+
#   theme(axis.text.x = element_text(angle = 270))
#
# ggplot(output_musbeat[!is.na(output_musbeat$residence),], aes(x = residence, fill=youth_country)) +
#   geom_bar()+
#   labs(title = 'RESIDENCE BY YOUTH COUNTRY')+
#   my_vert_theme
#
# ggplot(output_musbeat[!is.na(output_musbeat$youth_country),], aes(x = youth_country, fill=residence)) +
#   geom_bar()+
#   labs(title = 'YOUTH COUNTRY BY RESIDENCE')+
#   my_vert_theme
# # ###############################################################################################
#
