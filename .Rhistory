xlab = 'Perceptual abilities (self-reported)'+
ylab =  'Visual choice RT (ms)'
ggplot(output, aes(x = headphones,fill=device)) +
geom_bar()+
labs(title = 'HEADPHONES by device')+
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)'+
ylab =  'Visual choice RT (ms)'
ggplot(output, aes(x = headphones,fill=device)) +
geom_bar()+
labs(title = 'HEADPHONES by device'+
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)'+
ylab =  'Visual choice RT (ms)')
ggplot(output, aes(x = headphones,fill=device)) +
geom_bar()+
labs(title = 'HEADPHONES by device'+
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)'+
ylab =  'Visual choice RT (ms)')
ggplot(output, aes(x = headphones,fill=device)) +
geom_bar()+
labs(title = 'HEADPHONES by device'
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)'
ylab =  'Visual choice RT (ms)')
ggplot(output, aes(x = headphones,fill=device)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')
ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')
ggplot(output, aes(x = headphones,fill=device)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')
ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')
ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)',
ylim(0-8))
ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)',
ylim(0,8))
ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)',
ylim(0,9))
ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="Stopping distance", limits=c(0, 8))
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="Stopping distance", limits=c(0, 8))
dev +
font("xlab", size = 44,  face = "bold", color = "darkred")+
font("ylab", size = 34,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="n", limits=c(0, 8))
dev +
font("xlab", size = 44,  face = "bold", color = "darkred")+
font("ylab", size = 34,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="number of participants", limits=c(0, 8))
dev +
font("xlab", size = 44,  face = "bold", color = "darkred")+
font("ylab", size = 34,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="number of participants", limits=c(0, 8))
dev +
font("xlab", size = 30,  face = "bold")+
font("ylab", size = 30,  face = "bold")
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 30,  face = "bold")
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
View(output)
View(output_all)
View(output)
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="number of participants", limits=c(0, 8))
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="number of participants", limits=c(0, 9))
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="number of participants", limits=c(0, 9))
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_discrete(name="number of participants", limits=c(0, 9))
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_discrete(name="number of participants")
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_discrete(name="number of participants", limits=c(2,4,6,8,10))
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_discrete(name="number of participants", limits=c(2,4,6,8,10))
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="number of participants", limits=c(2,4,6,8,10))
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_continuous(name="number of participants", limits=c(2,4,6,8,10))
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
discrete
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_discrete(name="number of participants", limits=c(2,4,6,8,10))
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_discrete(name="number of participants", limits=c(2,4,6,8))
dev +
font("xlab", size = 10,  face = "bold")+
font("ylab", size = 20,  face = "bold")
?ggplot
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'HEADPHONES by device',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_discrete(name="number of participants", limits=c(2,4,6,8))
dev +
font("xlab", size = 10)+
font("ylab", size = 20)
dev +
font("xlab", size = 10)+
font("ylab", size = 10)
dev +
font("xlab", size = 14)+
font("ylab", size = 14)
dev<-ggplot(output, aes(x = device,fill=headphones)) +
geom_bar()+
labs(title = 'Device by headphones',
# my_vert_theme+
xlab = 'Perceptual abilities (self-reported)',
ylab =  'Visual choice RT (ms)')+
scale_y_discrete(name="number of participants", limits=c(2,4,6,8))
dev +
font("xlab", size = 14)+
font("ylab", size = 14)
# exclude participants who used their device’s internal speakers in the pitch experiment
output_touch_headph_only<- subset(output_headph_only, device=="Smartphone (touchscreen)")
View(output_touch_headph_only)
# exclude participants who used their device’s internal speakers in the pitch experiment
output_touch_headph_only<- subset(output_headph_only, device=="Smartphone (touchscreen)"|device=="Tablet (touchscreen)")
View(output_touch_headph_only)
output_touch_headph_only$part<-1:nrow(output_touch_headph_only)
output_touch_headph_only <- subset(output_touch_headph_only, select=c(part,1:ncol(output_touch_headph_only)-1))
View(output_all)
# exclude participants who used their device’s internal speakers in the pitch experiment
output_touch_headph_only<- subset(output_headph_only, device=="Smartphone (touchscreen)"|device=="Tablet (touchscreen)")
output_all$part<-1:nrow(output_all)
output_all <- subset(output_all, select=c(part,1:ncol(output_all)-1))
output_headph_only$part<-1:nrow(output_headph_only)
output_headph_only <- subset(output_headph_only, select=c(part,1:ncol(output_headph_only)-1))
output_touch_headph_only$part<-1:nrow(output_touch_headph_only)
output_touch_headph_only <- subset(output_touch_headph_only, select=c(part,1:ncol(output_touch_headph_only)-1))
View(output_touch_headph_only)
View(output_headph_only)
View(output_all)
###########################################################################
# This script extracts data from the polyrhythm experiment demonstration
# Project: Neuromusic VII - Aarhus Summer School in Music Neuroscience, 2021
#
# Date: June 2021
# Author: Cecilie Møller
###########################################################################
# install.packages("jsonlite")
# install.packages("plyr")
# install.packages("dplyr")
# install.packages("ggplot2")
# INITIALIZE
library(jsonlite)
library(plyr)
library(dplyr)
library(ggplot2)
# library(gglearn2)
# SET WORKING DIRECTORY
setwd("C:/Users/au213911/Documents/SummerSchoolOnlineExp")
# LIST FILES IN WORKING DIRECTORY (ignoring folders and recursives)
files <- setdiff(list.files(paste0(getwd(),"/results/results"),include.dirs=F,all.files=F),list.dirs(paste0(getwd(),"/results/results"),full.names=F))
files <- files[grep(".rds$",files)]
names(files) <- basename(files)
addUniqueID <- ldply(files)
# CREATE OUTPUT FILE
output <- data.frame(id=character(),
consent=character(),
stringsAsFactors=F)
for (i in 1:length(files)) {
results <- readRDS(paste0(getwd(),"/results/results/",files[i]))
output[i,"id"] <- results$session$p_id
output[i,"complete"] <- results$session$complete
output[i,"currentTime"] <- results$session$current_time
output[i,"startTime"] <- results$session$time_started
output[i,"device"] <- results$results$device
# output[i,"browser"] <- results$results$browser
output[i,"headphones"] <- results$results$headphones
if ("consent"%in%names(results$results)) {
output[i,"consent"] <- results$results$consent
}
if ("age"%in%names(results$results)) {
output[i,"age"] <- results$results$age
output[i,"gender"] <- results$results$gender
}
if ("ollen"%in%names(results$results)) {
output[i,"ollen"] <- results$results$ollen
}
if ("years_instr"%in%names(results$results)) {
output[i,"MT_06"] <- results$results$MT_06
output[i,"instrument"] <- results$results$instrument
output[i,"years_instr"] <- results$results$years_instr
}
if ("duplets"%in%names(results$results)) {
output[i,"duplets"] <- results$results$duplets
}
if ("comments"%in%names(results$results)) {
output[i,"comments"] <- results$results$comments
}
if ("poly_ratio"%in%names(results$results)) {
# make js data into dataframe
jsdata<- fromJSON(results$results$poly_ratio)
#
#
#     #look in first row of the dataframe to see which condition (pitch/tempo/ratio) this participant was in and paste into output
#     output[i,"experiment"]<-jsdata$stimulus[1]
#
#
# extract relevant rows, i.e. only those containing tapping data
tapping_all <- subset(jsdata, trial_type== "audio-bpm-button-response")
# save spontaneous taps (which are in the first column) in the output file
output[i,"spontaneous_taps"]<-tapping_all$rt[1]
#remove spontaneous taps (duplicate column name)
tapping <- subset(tapping_all, stimulus!= "sounds/spont_tap_10s.mp3")
# and restructure
reshaped <- t(tapping)
# Extract stimulus names
conds<-reshaped['stimulus',]
# extract taps
taps<-reshaped['rt',]
# and paste the taps into the column in output which is named according to conds (stimulus name)
output[i,conds]<-taps
#
#
# # # extract stimulus presentation order and ratings
# #
# #     tr_ind<-reshaped['trial_index',]
# #     stim<-reshaped['stimulus',]
# #     output[i,tr_ind]<-stim
# #
# #     rating<-subset(jsdata, trial_type=="html-slider-response")
# #     t_rating <- t(rating)
# #
# #     tr_ind<-t_rating['trial_index',]
# #     verdict<-t_rating['response',]
# #     output[i,tr_ind]<-verdict
}
}
output <- bind_cols(addUniqueID, output)
output$id <-output$.id
output<- output%>% select(-.id,-V1 )
# # rename values in "experiment"
#
# output$experiment <- gsub("sounds/pitch/poly_pitch_marimba_loudness.mp3", "pitch", output$experiment)
# output$experiment <- gsub("sounds/tempo/poly_tempo_loudness_check.mp3", "tempo", output$experiment)
# output$experiment <- gsub("sounds/ratio/poly_ratio_loudness_check.mp3", "ratio", output$experiment)
# WHAT HAVE WE GOT OVERALL?
# how many finished the tapping part?
n_tapping<-sum(!is.na(output$spontaneous_taps))
#how many had tried the experiment at least once before?
n_duplets<-sum(!is.na(output$duplets[!output$duplets == "No"]))
#how many complete responses do we have (tapping + age, gender, musicianship)?
n_complete <-nrow(output[output$complete==TRUE,])
#
# # # OPTIONAL: EXCLUDE DATA from participants who stated that they had tried the experiment before
# # or who did not answer the duplet question and hence produced incomplete data.
#
# # Visualize cases to be excluded
#
# ggplot(output[!is.na(output$spontaneous_taps),], aes(x = duplets)) +
#   geom_bar()+
#   labs(title = 'TAPPING DATASETS: Have you taken this exact same test before?')+
#   theme(axis.text.x = element_text(angle = 270))+
#   facet_wrap(~ollen)
#
# ggplot(output[output$complete==TRUE,], aes(x = duplets)) +
#   geom_bar()+
#   labs(title = 'COMPLETE DATASETS: Have you taken this exact same test before?')+
#   theme(axis.text.x = element_text(angle = 270))+
#   facet_wrap(~ollen)
#
#
#  # exclude
#
# output <- subset(output, duplets== "No")
# output <- subset(output, complete== TRUE) # redundant in this case as incomplete responses were not included in the line above either
#
#
# # OPTIONAL: manually remove participants whose data was saved twice under different ids
#
# # diagnose
# doubledata<- output[duplicated(output$spontaneous_taps),]
#
# #remove (manually insert id number(s) from the variable "doubledata")
# output <- subset(output, id!="id=xxx&p_id=xxxxxxxxxxxxxxxxxxxxxxxxx.rds")
#
# #
# # # assess a subsample of possibly safari-related pointy ITI-plots
# #
# # output_r$browser[output_r$part[c(2,10,17,20,25,37,43,48,52,59,63,64,67,82,89,105,108,109,114,116)]]
#
# # recode "ollen" into  "musicianship" variable
#
# output$musicianship[output$ollen=="Nonmusician"]  <- "Nonmusician"
# output$musicianship[output$ollen=="Music-loving nonmusician"]  <- "Nonmusician"
# output$musicianship[output$ollen=="Amateur musician"]  <- "Amateur musician"
# output$musicianship[output$ollen=="Serious amateur musician"]  <- "Amateur musician"
# output$musicianship[output$ollen=="Semiprofessional musician"]  <- "Semi/professional musician"
# output$musicianship[output$ollen=="Professional musician"]  <- "Semi/professional musician"
#
# # output$musicianship <- factor(output$musicianship, levels=c("Nonmusician","Amateur musician","Semi/professional musician"))
#
# # output <- subset(output, select=c(1:13,musicianship,14:ncol(output)-1))
# MAKE FILES
emptycols <- colSums(is.na(output)) == nrow(output)
output_all <- output[!emptycols]
# exclude participants who used their device’s internal speakers
output_headph_only<- subset(output_all, headphones!= "my device's internal speakers")
# exclude participants who used their device’s internal speakers in the pitch experiment
output_touch_headph_only<- subset(output_headph_only, device=="Smartphone (touchscreen)"|device=="Tablet (touchscreen)")
#add part no separately for each participant in output_all
output_all$part<-1:nrow(output_all)
output_all <- subset(output_all, select=c(part,1:ncol(output_all)-1))
#add part no separately for each participant in output_headph_only
output_headph_only$part<-1:nrow(output_headph_only)
output_headph_only <- subset(output_headph_only, select=c(part,1:ncol(output_headph_only)-1))
#add part no separately for each participant in output_headph_only
output_touch_headph_only$part<-1:nrow(output_touch_headph_only)
output_touch_headph_only <- subset(output_touch_headph_only, select=c(part,1:ncol(output_touch_headph_only)-1))
View(output_touch_headph_only)
write.csv(output_touch_headph_only, file = "./results/SummerSchool_touch_headph_only.csv",row.names = FALSE)
View(output_touch_headph_only)
View(output_all)
output_all$`sounds/2_3_135_203_spont.mp3`
output_all$comments
setwd("~/musbeat")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
setwd("~/musbeat")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
shiny::runApp(".")
